// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: jsonrpc.proto

package jsonrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	JSONRPCService_Transport_FullMethodName = "/JSONRPCService/Transport"
)

// JSONRPCServiceClient is the client API for JSONRPCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JSONRPCServiceClient interface {
	Transport(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[GenericJSONRPCMessage, GenericJSONRPCMessage], error)
}

type jSONRPCServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJSONRPCServiceClient(cc grpc.ClientConnInterface) JSONRPCServiceClient {
	return &jSONRPCServiceClient{cc}
}

func (c *jSONRPCServiceClient) Transport(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[GenericJSONRPCMessage, GenericJSONRPCMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &JSONRPCService_ServiceDesc.Streams[0], JSONRPCService_Transport_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GenericJSONRPCMessage, GenericJSONRPCMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type JSONRPCService_TransportClient = grpc.BidiStreamingClient[GenericJSONRPCMessage, GenericJSONRPCMessage]

// JSONRPCServiceServer is the server API for JSONRPCService service.
// All implementations must embed UnimplementedJSONRPCServiceServer
// for forward compatibility.
type JSONRPCServiceServer interface {
	Transport(grpc.BidiStreamingServer[GenericJSONRPCMessage, GenericJSONRPCMessage]) error
	mustEmbedUnimplementedJSONRPCServiceServer()
}

// UnimplementedJSONRPCServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedJSONRPCServiceServer struct{}

func (UnimplementedJSONRPCServiceServer) Transport(grpc.BidiStreamingServer[GenericJSONRPCMessage, GenericJSONRPCMessage]) error {
	return status.Errorf(codes.Unimplemented, "method Transport not implemented")
}
func (UnimplementedJSONRPCServiceServer) mustEmbedUnimplementedJSONRPCServiceServer() {}
func (UnimplementedJSONRPCServiceServer) testEmbeddedByValue()                        {}

// UnsafeJSONRPCServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JSONRPCServiceServer will
// result in compilation errors.
type UnsafeJSONRPCServiceServer interface {
	mustEmbedUnimplementedJSONRPCServiceServer()
}

func RegisterJSONRPCServiceServer(s grpc.ServiceRegistrar, srv JSONRPCServiceServer) {
	// If the following call pancis, it indicates UnimplementedJSONRPCServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&JSONRPCService_ServiceDesc, srv)
}

func _JSONRPCService_Transport_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(JSONRPCServiceServer).Transport(&grpc.GenericServerStream[GenericJSONRPCMessage, GenericJSONRPCMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type JSONRPCService_TransportServer = grpc.BidiStreamingServer[GenericJSONRPCMessage, GenericJSONRPCMessage]

// JSONRPCService_ServiceDesc is the grpc.ServiceDesc for JSONRPCService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JSONRPCService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "JSONRPCService",
	HandlerType: (*JSONRPCServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Transport",
			Handler:       _JSONRPCService_Transport_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "jsonrpc.proto",
}
